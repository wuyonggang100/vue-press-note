(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{398:function(e,l,s){"use strict";s.r(l);var a=s(54),n=Object(a.a)({},(function(){var e=this,l=e.$createElement,s=e._self._c||l;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polyfill"}},[e._v("#")]),e._v(" polyfill")]),e._v(" "),s("blockquote",[s("p",[e._v("Polyfill 其实是一个概念，就是使用浏览器兼容的代码去模拟新的 API 特性，在后面说到的 Polyfill 均是这个意思，不是特指 @babel/polyfill。在 babel 中有三种方式可以启用 polyfill。")])]),e._v(" "),s("h5",{attrs:{id:"实现-polyfill-的三种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-polyfill-的三种方式"}},[e._v("#")]),e._v(" 实现 polyfill 的三种方式")]),e._v(" "),s("ul",[s("li",[e._v("直接使用 @babel/polyfill 这个包。它包含 corejs 和 regenerator-runtime 两个包。")]),e._v(" "),s("li",[e._v("通过配置 @babel/preset-env 来启用 corejs，或者启用 @babel/polyfill。")]),e._v(" "),s("li",[e._v("使用 @babel/runtime 配合 @babel/plugin-transform-runtime，通过配置后者来启用 corejs。")])]),e._v(" "),s("h5",{attrs:{id:"babel-preset-env-的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel-preset-env-的缺陷"}},[e._v("#")]),e._v(" @babel/preset-env 的缺陷")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("regenerator-runtime 的重要性 :")]),e._v("   不管是 generator 还是 async 最终被转换成的代码里面都需要使用 regenerator-runtime 这个包来提供必不可少的regeneratorRuntime 函数。@babel/polyfill 包含这个包，@babel/runtime 配合 @babel/plugin-transform-runtime 使用时，@babel/runtime 其实内部也提供了这个包。唯独 @babel/preset-env 没有提供该包，对此问题的解决有三种方式：")]),e._v(" "),s("ul",[s("li",[e._v("@babel/preset-env 指定 useBuiltIns 选项 为 usage 或者 entry，并安装 @babel/polyfill。")]),e._v(" "),s("li",[e._v('直接在项目入口文件的顶部引入这个包。require("regenerator-runtime/runtime")，这是最直接的方法。')]),e._v(" "),s("li",[e._v("同时使用 @babel/preset-env 和 @babel/runtime 、@babel/plugin-transform-runtime。")])])]),e._v(" "),s("h4",{attrs:{id:"方式一-直接使用-babel-polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一-直接使用-babel-polyfill"}},[e._v("#")]),e._v(" 方式一：直接使用@babel/polyfill")]),e._v(" "),s("blockquote",[s("p",[e._v("包含 corejs 下的 stable 文件中的 API 特性和 regenerator-runtime。使用方式是在 项目入口文件顶部直接引入 polyfill或者在webpack 中引入。")])]),e._v(" "),s("ul",[s("li",[e._v("缺陷：引入这个包后，会将 corejs/stable 下的所有的 API 通过挂载到 prototype 上。缺点有两个。\n"),s("ul",[s("li",[e._v("会将所有的 API 都引入，增加了包的体积。")]),e._v(" "),s("li",[e._v("如果是一个 library，那么不应该污染全局环境，而直接引入 @babel/polyfill 的方式会污染全局。")])])]),e._v(" "),s("li",[e._v("解决：\n"),s("ul",[s("li",[e._v("对问题一，使用方式二 @babel/preset-env  ；")]),e._v(" "),s("li",[e._v("@babel/runtime 配合 @babel/plugin-transform-runtime ；")])])])]),e._v(" "),s("h4",{attrs:{id:"方式二-通过配置-babel-preset-env-来使用-corejs或-babel-polyfill。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二-通过配置-babel-preset-env-来使用-corejs或-babel-polyfill。"}},[e._v("#")]),e._v(" 方式二 ：通过配置 @babel/preset-env 来使用 corejs或 @babel/polyfill。")]),e._v(" "),s("blockquote",[s("p",[e._v("@babel/preset-env 包含了很多语法 "),s("strong",[e._v("转换插件")]),e._v("，可以用来转换一些语法。@babel/polyfill 包含了 corejs、regenerator-runtime，corejs 包含了 ECMAScript、web、提案阶段的 javasciprt 的各种 API，regenerator-runtime 用来提供 generator、async 的运行时。")]),e._v(" "),s("p",[e._v("因为 @babel/polyfill 包含 corejs、regenerator-tuntime，而后者只是 generator 函数、async 函数的运行时。所以在 babel 中，通常 corejs 可以单独拿出来作为 Polyfill。需要配合 env 中的useBuiltIns 选项来使用。")]),e._v(" "),s("blockquote",[s("ul",[s("li",[e._v("useBuiltIns: 'usage'。根据 targets 中的浏览器版本，只引入浏览器不支持并且有在代码中使用到的 API。只安装polyfill 不引入。")]),e._v(" "),s("li",[e._v("useBuiltIns: 'entry'。根据 targets 中的浏览器版本，只引入浏览器不支持的 API。在入口文件中引入 polyfill。")]),e._v(" "),s("li",[e._v("useBuiltIns: false | 不设置。不通过 preset-env 启用 polyfill。需要单独引入polyfill。")])])])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("@babel/preset-env 开启 corejs 。")]),e._v(" "),s("p",[e._v('useBuiltIns设为 "usage" ，同时指定corejs版本，并安装此版本。')])]),e._v(" "),s("li",[s("p",[e._v("@babel/preset-env 开启 @babel/polyfill。")]),e._v(" "),s("p",[e._v('useBuiltIns设为 "usage" ， 直接安装 @babel/polyfill ，不要引入，即可实现按需使用。')])])]),e._v(" "),s("h4",{attrs:{id:"方式三-babel-runtime-配合-babel-plugin-transform-runtime-并启用-polyfill"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式三-babel-runtime-配合-babel-plugin-transform-runtime-并启用-polyfill"}},[e._v("#")]),e._v(" 方式三：@babel/runtime 配合 @babel/plugin-transform-runtime 并启用 polyfill")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("@babel/runtime，包含了 babel 的一些运行时 :")]),e._v(" "),s("ul",[s("li",[e._v("@babel/helper：一些helper工具函数，例如 *typeof 用于判断类型，_*extend 用于创建新对象。")]),e._v(" "),s("li",[e._v("regenerator-runtime：作为 generator 、async 的运行时")])])]),e._v(" "),s("li",[s("p",[e._v("@babel/plugin-transform-runtime 有两个作用")]),e._v(" "),s("ul",[s("li",[e._v("将 corejs: 3 的配置传递给它，可以启用 polyfill，并且不会产生全局污染。")])]),e._v(" "),s("blockquote",[s("p",[e._v("注意这里是时候用 corejs 来作为 Polyfill，而不是 @babel/polyfill，所以需要设置 corejs 的版本 X，并安装 @babel/runtime-corejsX。")])]),e._v(" "),s("ul",[s("li",[e._v("默认情况下，在每一个文件开头，babel 会把需要的工具函数定义头部，那么当文件多起来的时候，可能就会存在重复定义工具函数的问题。为了解决这个问题，每当有使用到相关工具函数时，就从 @babel/runtime 内部提供的 @babel/helper 中去拿，避免了重复定义，减小了包的体积。Babel转换后的代码想要实现和原来代码一样的功能需要借助一些帮助函数，")])]),e._v(" "),s("blockquote",[s("p",[e._v("这是针对全局污染的问题的解决方案，但也只提供 API 的 polyfill。在实际项目中还要使用 preset-env 来提供语法转换插件。另外在这是使用的 corejs 来作为 polyfill，如果是 corejs3 则需要安装 @babel/runtime-corejs3，如果是 corejs2 就安装 @babel/runtime-corejs2。")]),e._v(" "),s("blockquote",[s("p",[e._v("npm install --save-dev @babel/preset-env\nnpm install --save-dev @babel/plugin-transform-runtime\nnpm install --save @babel/runtime\nnpm install --save @babel/runtime-corejs3")])]),e._v(" "),s("p",[e._v("配置如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": {\n          "edge": "10",\n          "firefox": "60",\n          "chrome": "67",\n          "safari": "11.1",\n        }\n      }\n    ]\n  ],\n "plugins": [\n    [\n      "@babel/plugin-transform-runtime", \n       {\n         "corejs": 3\n       }\n    ] \n  ]\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br")])]),s("p",[e._v("之所以可以避免全局污染，其实还是要得益于 corejs 的另外一个版本 core-js-pure，这个包跟 corejs 这包不同的地方在于 corejs 会修改 prototype，并且暴露方式也有所不同。@babel/runtime-corejs3 中包含的就是 core-js-pure。所以 @babel/plugin-transform-runtime，就是使用它来避免全局污染。")])])])]),e._v(" "),s("h4",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结：")]),e._v(" "),s("blockquote",[s("p",[e._v("在babel 中开启polyfill 的三种方式：")]),e._v(" "),s("ul",[s("li",[e._v("使用 @babel/preset-env ，useBuiltIns 设置为 'entry' ；")]),e._v(" "),s("li",[e._v("使用 @babel/preset-env ，useBuiltIns 设置为 'usage' ；")]),e._v(" "),s("li",[e._v("使用 @babel/plugin-transform-runtime，开启corejs ；")])])]),e._v(" "),s("h4",{attrs:{id:"最后附上一个最佳实践的完整配置-babel-config-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后附上一个最佳实践的完整配置-babel-config-js"}},[e._v("#")]),e._v(" 最后附上一个最佳实践的完整配置 babel.config.js")]),e._v(" "),s("blockquote",[s("p",[e._v("webpack 中需要使用 babel-loader")]),e._v(" "),s("p",[e._v("推荐使用 babel.config.js的方式，可以根据实际情况添加一些需要的配置")]),e._v(" "),s("p",[e._v("npm install @babel/runtime @babel/runtime-corejs3 --save （运行时）\nnpm install @babel/core @babel/plugin-transform-runtime @babel/preset-env babel-loader --save-dev（开发时）")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('module.exports = {\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": { // 这里根据实际兼容范围进行更改\n          "edge": 17,\n          "firefox": 60,\n          "chrome": 58,\n          "safari": 11.1,\n          "ie": 11\n        }\n      }\n    ]\n  ],\n  "plugins": [\n    [\n      "@babel/plugin-transform-runtime",\n      {\n        "corejs": 3\n      }\n    ]\n  ]\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("h4",{attrs:{id:"最后总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后总结"}},[e._v("#")]),e._v(" 最后总结")]),e._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[e._v("babel-polyfill是在原有的JS内置对象及方法上做向后兼容的处理，比如说ES5里面的Object是没有自带assign方法的，那么你加载了babel-polyfill之后，它就给Object扩展了一个assign方法，这样你就可以直接使用Object.assign(obj1, obj2)了，而babel-runtime的方式则需要babel作为工具，在转换的过程中，检测到你使用了Object.assign，而且你的"),s("code",[e._v(".babelrc")]),e._v("配置中需要对其做ES5兼容处理，那么结合babel-plugin-transform-runtime，在该JS文件中引入Object.assign的Polyfill，这样也能实现Object.assign的功能，但是你无法在Object上直接找到assign的方法。")])]),e._v(" "),s("li",[s("p",[e._v("babel-polyfill会直接修改全局对象的prototype或者直接修改实现全局对象比如Promise这种，且静态方法、实例方法它都可以实现，且会被打包到vendor；transform-runtime不会修改对象的prototype，只是按需提供，且实例方法它没有实现。如Array.prototype.find 等，打包到vendor，如果你用的是webpack，那是它来完成的，babel只负责ES6的转换，还是得区分一下这2者的作用，顺便再说一下自己的看法，如果你是写工具类的项目，那么babel-runtime比较合适，但是如果你是做web站点，全局很多地方都用到了Promise、Array.map、Object.assign等ES6的特性，那么babel-polyfill或许更加方便一些。")])]),e._v(" "),s("li",[s("p",[e._v("可以查看 https://github.com/tonyc726/babel-note")])])])])])}),[],!1,null,null,null);l.default=n.exports}}]);