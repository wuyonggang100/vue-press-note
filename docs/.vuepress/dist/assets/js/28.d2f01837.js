(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{413:function(s,a,t){"use strict";t.r(a);var e=t(54),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"将本地已有的仓库关联到远程的空仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将本地已有的仓库关联到远程的空仓库"}},[s._v("#")]),s._v(" 将本地已有的仓库关联到远程的空仓库")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关联")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" origin 远程仓库地址  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# origin 是此次自定义的远程仓库的名称，可以是 xxx")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 推送，第一次推送带上 -u 会推送并关联")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push -u origin master  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 把本地 master 分支推送到远程 origin 分支")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"当远程某些分支已经删除-而本地还保留时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当远程某些分支已经删除-而本地还保留时"}},[s._v("#")]),s._v(" 当远程某些分支已经删除，而本地还保留时")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("列出本地所有分支以及它们的追踪状态，可以显示远程的哪些分支已经被删除。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("git remote show origin   \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("删除本地较远程残留的多余的分支，与远程保持一致")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("git remote prune origin  // 删除残留分支\ngit branch -D xxx   // 删除本地现有比远程多的分支 xxx\ngit branch -a  // 查看本地现有分支\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])]),s._v(" "),t("h4",{attrs:{id:"先本地删除某分支-然后对远程删除同一分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#先本地删除某分支-然后对远程删除同一分支"}},[s._v("#")]),s._v(" 先本地删除某分支，然后对远程删除同一分支")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("git branch -d xxx  // 删除本地 xxx 分支\ngit push origin -d xxx // 删除远程 xxx 分支\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h5",{attrs:{id:"撤销commit-回到add-后的状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#撤销commit-回到add-后的状态"}},[s._v("#")]),s._v(" 撤销commit ，回到add 后的状态")]),s._v(" "),t("blockquote",[t("p",[s._v("只是撤回到 commit 前的状态，代码不会丢失。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("git reset --soft HEAD^  \n// HEAD^的意思是上一个版本，也可以写成HEAD~1\n// 如果进行了2次commit，想把这两次都撤回，可以使用HEAD~2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("--mixed\n意思是：代码不丢失，回到add 前状态；\n这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。")]),s._v(" "),t("p",[s._v("--soft\n代码不丢失，回到 add 后状态")]),s._v(" "),t("p",[s._v("--hard\n代码丢失，回到上一次commit 后的状态")])]),s._v(" "),t("h3",{attrs:{id:"本地分支封版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地分支封版"}},[s._v("#")]),s._v(" 本地分支封版")]),s._v(" "),t("blockquote",[t("p",[s._v("需要从此分支上新建一个分支用来开发，并推送到远程")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 从本地当前分支xxx上新建并切换到该分支进行开发：\ngit checout -b newBranch \n// 将新建分支推送到远程：\ngit push origin newBranch\n// 删除本地原来开发的分支(不能删除远程分支xxx)\ngit branch -D xxx\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h4",{attrs:{id:"设置git-缓存值大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置git-缓存值大小"}},[s._v("#")]),s._v(" 设置git 缓存值大小")]),s._v(" "),t("blockquote",[t("p",[s._v("有时 git  clone  因为代码量过大最后会 clone 失败，此时需要加大git 缓存空间大小。默认为 65520")]),s._v(" "),t("p",[s._v("如下表示设置为5G")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global http.postBuffer "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5242880000")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global https.postBuffer "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5242880000")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --list 查看设置值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"git报错-another-git-process-seems-to-be-running-in-thisrepository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git报错-another-git-process-seems-to-be-running-in-thisrepository"}},[s._v("#")]),s._v(" Git报错：Another git process seems to be running in thisrepository")]),s._v(" "),t("blockquote",[t("p",[s._v("翻译：另一个git进程似乎正在这个存储库中运行，例如 由“git commit”打开的编辑器。请确保所有流程终止，然后重试。如果它仍然失败，一个git进程可能已在此存储库中崩溃：手动删除文件以继续。")])]),s._v(" "),t("p",[s._v("解决方法有两种：")]),s._v(" "),t("ol",[t("li",[s._v("找到.git/index.lock文件，直接删除即可；\n如果在linux上的话，执行rm删除命令：")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("rm "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("git"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("执行 git 命令")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("git clean "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("f "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("git"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("lock\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"git-rebase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[s._v("#")]),s._v(" git rebase")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("代码合并有两种方式：合并 (merge) 和衍合 (rebase) , 衍变又称变基。 变基可以让代码的提交历史更简洁清晰，不杂乱。实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。")])]),s._v(" "),t("li",[t("p",[s._v("合并的核心在于差异比较，将有差异的部分合到一起；对于两个不同分支的合并，git 官方解释是：它是把两个分支的最新快照以及二者最近的共同祖先进行三方合并，合并的结果是生成一个新的快照（并提交）。")])]),s._v(" "),t("li",[t("p",[s._v("衍合/变基：思路在于将多次提交都变化为在一条分支上依次进行，最后只得到一条变化线。")])]),s._v(" "),t("li",[t("p",[s._v("例子：想要把某分支 experiment 改动的代码合到 master 分支上， 而这两个分支目前都有各自的改动；")]),s._v(" "),t("p",[s._v("图1")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210628094538249.png",alt:"image-20210628094538249"}})]),s._v(" "),t("p",[s._v("图2")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210628094609483.png",alt:"image-20210628094609483"}})]),s._v(" "),t("p",[s._v("图3")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210628094628510.png",alt:"image-20210628094628510"}})])])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(". 将 experiment 变基到 master\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout experiment\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase master\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(". 回到 master， 将其他分支的代码进行快进合并\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout master\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge experiment \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("原理")]),s._v(" "),t("blockquote",[t("p",[s._v("首先找到这两个分支（即当前分支 experiment、衍合操作的目标分支 master）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。注意，也就是说这个过程中，如图experiment会先抛弃之前的C4提交，然后把C4变动的代码作为新的C4’重新再提交一次。")])])]),s._v(" "),t("li",[t("p",[s._v("避免雷区")]),s._v(" "),t("blockquote",[t("p",[s._v("在上面的衍合过程中，给 master 起个名字叫被动分支，experiment 叫主动分支。")]),s._v(" "),t("p",[t("strong",[s._v("注意： 不要将公共分支作为“主动分支”使用衍合，最好是将自己单独的分支作为主动分支。")])])])]),s._v(" "),t("li",[t("p",[s._v("使用场景：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("当别人也有提交，自己 push 的时候会将别人的已经 push 的代码merge 后再来 push 一次，此时提交历史就会杂乱重复，需要用到 rebase 。解决方式如下")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("拉取代码的时候需要\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull --rebase\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" pull --rebase origin dev    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从dev分支进行 rebase 拉取")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("在 sourcetree 中， 勾选衍合，英文是 rebase 。")]),s._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210628101206018.png",alt:"image-20210628101206018"}})])]),s._v(" "),t("li",[t("p",[s._v("让提交历史清晰简洁。解决方式如上所述。")])])])]),s._v(" "),t("li",[t("p",[s._v("设置自动进行衍合。等同于上面的勾选衍合。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config --global pull.rebase "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"git-flow"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-flow"}},[s._v("#")]),s._v(" git flow")]),s._v(" "),t("h2",{attrs:{id:"主分支上修改的内容同步到子分支-非-merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主分支上修改的内容同步到子分支-非-merge"}},[s._v("#")]),s._v(" 主分支上修改的内容同步到子分支，非 merge")])])}),[],!1,null,null,null);a.default=n.exports}}]);